    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Port definitions
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED_port, 80
  LOGFORMAT-CONSTANT LED_port, 80
INSTRUCTION-CONSTANT
   OPERAND1-LED_port
  OP1 VALUE-LED_port
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;8 simple LEDs. Is an OUTPUT port. for LED[9:2]
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT DATA_IN_PORT, 00
  LOGFORMAT-CONSTANT DATA_IN_PORT, 00
INSTRUCTION-CONSTANT
   OPERAND1-DATA_IN_PORT
  OP1 VALUE-DATA_IN_PORT
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;input data port. this is an INPUT port.
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED_0, 40
  LOGFORMAT-CONSTANT LED_0, 40
INSTRUCTION-CONSTANT
   OPERAND1-LED_0
  OP1 VALUE-LED_0
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s0, 00
  LOGFORMAT-CONSTANT ISR_preserve_s0, 00
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s0
  OP1 VALUE-ISR_preserve_s0
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;Preserve s0 contents during ISR
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s1, 01
  LOGFORMAT-CONSTANT ISR_preserve_s1, 01
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s1
  OP1 VALUE-ISR_preserve_s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;Preserve s1 contents during ISR
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s2, 02
  LOGFORMAT-CONSTANT ISR_preserve_s2, 02
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s2
  OP1 VALUE-ISR_preserve_s2
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;Preserve s2 contents during ISR
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s3, 03
  LOGFORMAT-CONSTANT ISR_preserve_s3, 03
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s3
  OP1 VALUE-ISR_preserve_s3
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-;Preserve s3 contents during ISR
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s4, 04
  LOGFORMAT-CONSTANT ISR_preserve_s4, 04
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s4
  OP1 VALUE-ISR_preserve_s4
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s5, 05
  LOGFORMAT-CONSTANT ISR_preserve_s5, 05
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s5
  OP1 VALUE-ISR_preserve_s5
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT save_s2, 07
  LOGFORMAT-CONSTANT save_s2, 07
INSTRUCTION-CONSTANT
   OPERAND1-save_s2
  OP1 VALUE-save_s2
   OPERAND2-07
  OP2 VALUE-07
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT save_s3, 08
  LOGFORMAT-CONSTANT save_s3, 08
INSTRUCTION-CONSTANT
   OPERAND1-save_s3
  OP1 VALUE-save_s3
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT save_s1, 06
  LOGFORMAT-CONSTANT save_s1, 06
INSTRUCTION-CONSTANT
   OPERAND1-save_s1
  OP1 VALUE-save_s1
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED_pattern, 04
  LOGFORMAT-CONSTANT LED_pattern, 04
INSTRUCTION-CONSTANT
   OPERAND1-LED_pattern
  OP1 VALUE-LED_pattern
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;remember state of LEDs (8-bit counter in this case)
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Useful data constants
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Constant to define a software delay of 1us. This must be adjusted to reflect the
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; calculation highly predictable. The '6' in the following equation even allows for
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; 'CALL delay_1us' instruction in the initiating code.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; For clock rates below 10MHz the value of 1 must be used and the operation will
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; become lower than intended. Interrupts may effect the timing of software based
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; delays.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT delay_1us_constant, 05
  LOGFORMAT-CONSTANT delay_1us_constant, 05
INSTRUCTION-CONSTANT
   OPERAND1-delay_1us_constant
  OP1 VALUE-delay_1us_constant
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Initialise the system
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-cold_start
  FORMATTED-LOAD s0, 00
  LOGFORMAT-LOAD s0, 00
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-001
      LABEL-
  FORMATTED-STORE s0, LED_pattern
  LOGFORMAT-STORE s0, LED_pattern[04]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-LED_pattern
  OP2 VALUE-04
    COMMENT-
    ADDRESS-002
      LABEL-
  FORMATTED-OUTPUT s0, LED_port
  LOGFORMAT-OUTPUT s0, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-003
      LABEL-
  FORMATTED-ENABLE INTERRUPT
  LOGFORMAT-ENABLE INTERRUPT
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
  OP1 VALUE-INTERRUPT
   OPERAND2-
  OP2 VALUE-
    COMMENT-;now interrupts are on
    ADDRESS-004
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;*******************PART1*******************;
    ADDRESS-004
      LABEL-main_program
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-004
      LABEL-
  FORMATTED-LOAD s6, 01
  LOGFORMAT-LOAD s6, 01
INSTRUCTION-LOAD
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;mov s1,#1
    ADDRESS-005
      LABEL-
  FORMATTED-OUTPUT s6, LED_0
  LOGFORMAT-OUTPUT s6, LED_0[40]
INSTRUCTION-OUTPUT
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-LED_0
  OP2 VALUE-40
    COMMENT-;now the LED0 is on
    ADDRESS-006
      LABEL-
  FORMATTED-CALL delay_1s
  LOGFORMAT-CALL delay_1s[01E]
INSTRUCTION-CALL
   OPERAND1-delay_1s
  OP1 VALUE-01E
   OPERAND2-
  OP2 VALUE-
    COMMENT-;wait 1 second
    ADDRESS-007
      LABEL-
  FORMATTED-LOAD s6, 00
  LOGFORMAT-LOAD s6, 00
INSTRUCTION-LOAD
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;mov s1,#0
    ADDRESS-008
      LABEL-
  FORMATTED-OUTPUT s6, LED_0
  LOGFORMAT-OUTPUT s6, LED_0[40]
INSTRUCTION-OUTPUT
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-LED_0
  OP2 VALUE-40
    COMMENT-;now the LED0 is off
    ADDRESS-009
      LABEL-
  FORMATTED-CALL delay_1s
  LOGFORMAT-CALL delay_1s[01E]
INSTRUCTION-CALL
   OPERAND1-delay_1s
  OP1 VALUE-01E
   OPERAND2-
  OP2 VALUE-
    COMMENT-;wait 1 second
    ADDRESS-00A
      LABEL-
  FORMATTED-JUMP main_program
  LOGFORMAT-JUMP main_program[004]
INSTRUCTION-JUMP
   OPERAND1-main_program
  OP1 VALUE-004
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Software delay routines
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Delay of 1us.
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; instruction executes in 2 clock cycles making the calculation highly predictable.
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; in the initiating code. Interrupts may effect software derived delays.
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-00B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0
    ADDRESS-00B
      LABEL-delay_1us
  FORMATTED-LOAD s0, delay_1us_constant
  LOGFORMAT-LOAD s0, delay_1us_constant[05]
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-delay_1us_constant
  OP2 VALUE-05
    COMMENT-
    ADDRESS-00C
      LABEL-wait_1us
  FORMATTED-SUB s0, 01
  LOGFORMAT-SUB s0, 01
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-00D
      LABEL-
  FORMATTED-JUMP NZ, wait_1us
  LOGFORMAT-JUMP NZ, wait_1us[00C]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_1us
  OP2 VALUE-00C
    COMMENT-
    ADDRESS-00E
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-00F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-00F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Delay of 40us.
    ADDRESS-00F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-00F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0, s1
    ADDRESS-00F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-00F
      LABEL-delay_40us
  FORMATTED-LOAD s1, 28
  LOGFORMAT-LOAD s1, 28
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-28
  OP2 VALUE-28
    COMMENT-;40 x 1us = 40us
    ADDRESS-010
      LABEL-wait_40us
  FORMATTED-CALL delay_1us
  LOGFORMAT-CALL delay_1us[00B]
INSTRUCTION-CALL
   OPERAND1-delay_1us
  OP1 VALUE-00B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-011
      LABEL-
  FORMATTED-SUB s1, 01
  LOGFORMAT-SUB s1, 01
INSTRUCTION-SUB
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-012
      LABEL-
  FORMATTED-JUMP NZ, wait_40us
  LOGFORMAT-JUMP NZ, wait_40us[010]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_40us
  OP2 VALUE-010
    COMMENT-
    ADDRESS-013
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-014
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-014
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-014
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Delay of 1ms.
    ADDRESS-014
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-014
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0, s1, s2
    ADDRESS-014
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-014
      LABEL-delay_1ms
  FORMATTED-LOAD s2, 19
  LOGFORMAT-LOAD s2, 19
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-19
  OP2 VALUE-19
    COMMENT-;25 x 40us = 1ms
    ADDRESS-015
      LABEL-wait_1ms
  FORMATTED-CALL delay_40us
  LOGFORMAT-CALL delay_40us[00F]
INSTRUCTION-CALL
   OPERAND1-delay_40us
  OP1 VALUE-00F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-016
      LABEL-
  FORMATTED-SUB s2, 01
  LOGFORMAT-SUB s2, 01
INSTRUCTION-SUB
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-017
      LABEL-
  FORMATTED-JUMP NZ, wait_1ms
  LOGFORMAT-JUMP NZ, wait_1ms[015]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_1ms
  OP2 VALUE-015
    COMMENT-
    ADDRESS-018
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Delay of 20ms.
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Delay of 20ms used during initialisation.
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0, s1, s2, s3
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-019
      LABEL-delay_20ms
  FORMATTED-LOAD s3, 14
  LOGFORMAT-LOAD s3, 14
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-;20 x 1ms = 20ms
    ADDRESS-01A
      LABEL-wait_20ms
  FORMATTED-CALL delay_1ms
  LOGFORMAT-CALL delay_1ms[014]
INSTRUCTION-CALL
   OPERAND1-delay_1ms
  OP1 VALUE-014
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-01B
      LABEL-
  FORMATTED-SUB s3, 01
  LOGFORMAT-SUB s3, 01
INSTRUCTION-SUB
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-01C
      LABEL-
  FORMATTED-JUMP NZ, wait_20ms
  LOGFORMAT-JUMP NZ, wait_20ms[01A]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_20ms
  OP2 VALUE-01A
    COMMENT-
    ADDRESS-01D
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-01E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Delay of approximately 1 second.
    ADDRESS-01E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0, s1, s2, s3, s4
    ADDRESS-01E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01E
      LABEL-delay_1s
  FORMATTED-LOAD s4, 32
  LOGFORMAT-LOAD s4, 32
INSTRUCTION-LOAD
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-32
  OP2 VALUE-32
    COMMENT-;50 x 20ms = 1000ms
    ADDRESS-01F
      LABEL-wait_1s
  FORMATTED-CALL delay_20ms
  LOGFORMAT-CALL delay_20ms[019]
INSTRUCTION-CALL
   OPERAND1-delay_20ms
  OP1 VALUE-019
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-020
      LABEL-
  FORMATTED-SUB s4, 01
  LOGFORMAT-SUB s4, 01
INSTRUCTION-SUB
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-021
      LABEL-
  FORMATTED-JUMP NZ, wait_1s
  LOGFORMAT-JUMP NZ, wait_1s[01F]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_1s
  OP2 VALUE-01F
    COMMENT-
    ADDRESS-022
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;from pracPICO.psm
    ADDRESS-023
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;*******************PART2***************************;
    ADDRESS-023
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;some important comments:
    ADDRESS-023
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;we need to read the data and then  s1 counter s2 sum
    ADDRESS-023
      LABEL-ISR
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-023
      LABEL-
  FORMATTED-STORE s0, ISR_preserve_s0
  LOGFORMAT-STORE s0, ISR_preserve_s0[00]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-ISR_preserve_s0
  OP2 VALUE-00
    COMMENT-;data
    ADDRESS-024
      LABEL-
  FORMATTED-STORE s1, ISR_preserve_s1
  LOGFORMAT-STORE s1, ISR_preserve_s1[01]
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-ISR_preserve_s1
  OP2 VALUE-01
    COMMENT-;let's use it as a counter
    ADDRESS-025
      LABEL-
  FORMATTED-STORE s2, ISR_preserve_s2
  LOGFORMAT-STORE s2, ISR_preserve_s2[02]
INSTRUCTION-STORE
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-ISR_preserve_s2
  OP2 VALUE-02
    COMMENT-;let's use it as sum1
    ADDRESS-026
      LABEL-
  FORMATTED-STORE s3, ISR_preserve_s3
  LOGFORMAT-STORE s3, ISR_preserve_s3[03]
INSTRUCTION-STORE
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-ISR_preserve_s3
  OP2 VALUE-03
    COMMENT-;let's use it as save_s3
    ADDRESS-027
      LABEL-
  FORMATTED-STORE s4, ISR_preserve_s4
  LOGFORMAT-STORE s4, ISR_preserve_s4[04]
INSTRUCTION-STORE
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-ISR_preserve_s4
  OP2 VALUE-04
    COMMENT-;let's use it as unimportant sum
    ADDRESS-028
      LABEL-
  FORMATTED-STORE s5, ISR_preserve_s5
  LOGFORMAT-STORE s5, ISR_preserve_s5[05]
INSTRUCTION-STORE
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-ISR_preserve_s5
  OP2 VALUE-05
    COMMENT-;this is the output of led
    ADDRESS-029
      LABEL-
  FORMATTED-FETCH s1, save_s1
  LOGFORMAT-FETCH s1, save_s1[06]
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-save_s1
  OP2 VALUE-06
    COMMENT-; reload the values of this
    ADDRESS-02A
      LABEL-
  FORMATTED-FETCH s2, save_s2
  LOGFORMAT-FETCH s2, save_s2[07]
INSTRUCTION-FETCH
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-save_s2
  OP2 VALUE-07
    COMMENT-
    ADDRESS-02B
      LABEL-
  FORMATTED-FETCH s3, save_s3
  LOGFORMAT-FETCH s3, save_s3[08]
INSTRUCTION-FETCH
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-save_s3
  OP2 VALUE-08
    COMMENT-
    ADDRESS-02C
      LABEL-
  FORMATTED-INPUT s0, DATA_IN_PORT
  LOGFORMAT-INPUT s0, DATA_IN_PORT[00]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-DATA_IN_PORT
  OP2 VALUE-00
    COMMENT-; s0 gets the data
    ADDRESS-02D
      LABEL-
  FORMATTED-COMPARE s0, 80
  LOGFORMAT-COMPARE s0, 80
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-; see if the msb is 1 which means negative
    ADDRESS-02E
      LABEL-
  FORMATTED-JUMP NC, negative_to_positive
  LOGFORMAT-JUMP NC, negative_to_positive[03F]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-negative_to_positive
  OP2 VALUE-03F
    COMMENT-
    ADDRESS-02F
      LABEL-continue1
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;now  256 times wait
    ADDRESS-02F
      LABEL-
  FORMATTED-ADD s1, s0
  LOGFORMAT-ADD s1, s0
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;  now add this save_s1
    ADDRESS-030
      LABEL-
  FORMATTED-JUMP C, increment_LED
  LOGFORMAT-JUMP C, increment_LED[03D]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-increment_LED
  OP2 VALUE-03D
    COMMENT-
    ADDRESS-031
      LABEL-counter_loop
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-031
      LABEL-
  FORMATTED-ADD s3, 01
  LOGFORMAT-ADD s3, 01
INSTRUCTION-ADD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;will finish it after it reaches to FF
    ADDRESS-032
      LABEL-
  FORMATTED-JUMP C, got_256
  LOGFORMAT-JUMP C, got_256[042]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-got_256
  OP2 VALUE-042
    COMMENT-
    ADDRESS-033
      LABEL-
  FORMATTED-STORE s1, save_s1
  LOGFORMAT-STORE s1, save_s1[06]
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-save_s1
  OP2 VALUE-06
    COMMENT-;save them to memory
    ADDRESS-034
      LABEL-
  FORMATTED-STORE s2, save_s2
  LOGFORMAT-STORE s2, save_s2[07]
INSTRUCTION-STORE
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-save_s2
  OP2 VALUE-07
    COMMENT-
    ADDRESS-035
      LABEL-
  FORMATTED-STORE s3, save_s3
  LOGFORMAT-STORE s3, save_s3[08]
INSTRUCTION-STORE
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-save_s3
  OP2 VALUE-08
    COMMENT-
    ADDRESS-036
      LABEL-
  FORMATTED-FETCH s0, ISR_preserve_s0
  LOGFORMAT-FETCH s0, ISR_preserve_s0[00]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-ISR_preserve_s0
  OP2 VALUE-00
    COMMENT-;let's return them to the stack
    ADDRESS-037
      LABEL-
  FORMATTED-FETCH s1, ISR_preserve_s1
  LOGFORMAT-FETCH s1, ISR_preserve_s1[01]
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-ISR_preserve_s1
  OP2 VALUE-01
    COMMENT-
    ADDRESS-038
      LABEL-
  FORMATTED-FETCH s2, ISR_preserve_s2
  LOGFORMAT-FETCH s2, ISR_preserve_s2[02]
INSTRUCTION-FETCH
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-ISR_preserve_s2
  OP2 VALUE-02
    COMMENT-
    ADDRESS-039
      LABEL-
  FORMATTED-FETCH s3, ISR_preserve_s3
  LOGFORMAT-FETCH s3, ISR_preserve_s3[03]
INSTRUCTION-FETCH
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-ISR_preserve_s3
  OP2 VALUE-03
    COMMENT-
    ADDRESS-03A
      LABEL-
  FORMATTED-FETCH s4, ISR_preserve_s4
  LOGFORMAT-FETCH s4, ISR_preserve_s4[04]
INSTRUCTION-FETCH
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-ISR_preserve_s4
  OP2 VALUE-04
    COMMENT-
    ADDRESS-03B
      LABEL-
  FORMATTED-FETCH s5, ISR_preserve_s5
  LOGFORMAT-FETCH s5, ISR_preserve_s5[05]
INSTRUCTION-FETCH
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-ISR_preserve_s5
  OP2 VALUE-05
    COMMENT-
    ADDRESS-03C
      LABEL-
  FORMATTED-RETURNI ENABLE
  LOGFORMAT-RETURNI ENABLE
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
  OP1 VALUE-ENABLE
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03D
      LABEL-increment_LED
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03D
      LABEL-
  FORMATTED-ADD s2, 01
  LOGFORMAT-ADD s2, 01
INSTRUCTION-ADD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;save_s3 is incrementing by 1
    ADDRESS-03E
      LABEL-
  FORMATTED-JUMP counter_loop
  LOGFORMAT-JUMP counter_loop[031]
INSTRUCTION-JUMP
   OPERAND1-counter_loop
  OP1 VALUE-031
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03F
      LABEL-negative_to_positive
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03F
      LABEL-
  FORMATTED-XOR s0, FF
  LOGFORMAT-XOR s0, FF
INSTRUCTION-XOR
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-FF
  OP2 VALUE-FF
    COMMENT-
    ADDRESS-040
      LABEL-
  FORMATTED-ADD s0, 01
  LOGFORMAT-ADD s0, 01
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;now we convert negative to positive
    ADDRESS-041
      LABEL-
  FORMATTED-JUMP continue1
  LOGFORMAT-JUMP continue1[02F]
INSTRUCTION-JUMP
   OPERAND1-continue1
  OP1 VALUE-02F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-042
      LABEL-got_256
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;here we will compare the value of save_s3 then output it to LEDs
    ADDRESS-042
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;let's say we got 5 = 00000101 then we need to get xxx00000
    ADDRESS-042
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-043
      LABEL-
  FORMATTED-JUMP NC, six
  LOGFORMAT-JUMP NC, six[047]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-six
  OP2 VALUE-047
    COMMENT-
    ADDRESS-044
      LABEL-
  FORMATTED-LOAD s1, FF
  LOGFORMAT-LOAD s1, FF
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-FF
  OP2 VALUE-FF
    COMMENT-;LED2
    ADDRESS-045
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-046
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-047
      LABEL-six
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-047
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-048
      LABEL-
  FORMATTED-JUMP NC, five
  LOGFORMAT-JUMP NC, five[04C]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-five
  OP2 VALUE-04C
    COMMENT-
    ADDRESS-049
      LABEL-
  FORMATTED-LOAD s1, FE
  LOGFORMAT-LOAD s1, FE
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-FE
  OP2 VALUE-FE
    COMMENT-
    ADDRESS-04A
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-04B
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04C
      LABEL-five
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04C
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04D
      LABEL-
  FORMATTED-JUMP NC, four
  LOGFORMAT-JUMP NC, four[051]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-four
  OP2 VALUE-051
    COMMENT-
    ADDRESS-04E
      LABEL-
  FORMATTED-LOAD s1, FC
  LOGFORMAT-LOAD s1, FC
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-FC
  OP2 VALUE-FC
    COMMENT-
    ADDRESS-04F
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-050
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-051
      LABEL-four
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-051
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-052
      LABEL-
  FORMATTED-JUMP NC, three
  LOGFORMAT-JUMP NC, three[056]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-three
  OP2 VALUE-056
    COMMENT-
    ADDRESS-053
      LABEL-
  FORMATTED-LOAD s1, F8
  LOGFORMAT-LOAD s1, F8
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-F8
  OP2 VALUE-F8
    COMMENT-
    ADDRESS-054
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-055
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-056
      LABEL-three
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-056
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-057
      LABEL-
  FORMATTED-JUMP NC, two
  LOGFORMAT-JUMP NC, two[05B]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-two
  OP2 VALUE-05B
    COMMENT-
    ADDRESS-058
      LABEL-
  FORMATTED-LOAD s1, F0
  LOGFORMAT-LOAD s1, F0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-F0
  OP2 VALUE-F0
    COMMENT-
    ADDRESS-059
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-05A
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05B
      LABEL-two
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05B
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05C
      LABEL-
  FORMATTED-JUMP NC, one
  LOGFORMAT-JUMP NC, one[060]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-one
  OP2 VALUE-060
    COMMENT-
    ADDRESS-05D
      LABEL-
  FORMATTED-LOAD s1, E0
  LOGFORMAT-LOAD s1, E0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-E0
  OP2 VALUE-E0
    COMMENT-
    ADDRESS-05E
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-05F
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-060
      LABEL-one
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-060
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-061
      LABEL-
  FORMATTED-JUMP NC, zero
  LOGFORMAT-JUMP NC, zero[065]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-zero
  OP2 VALUE-065
    COMMENT-
    ADDRESS-062
      LABEL-
  FORMATTED-LOAD s1, C0
  LOGFORMAT-LOAD s1, C0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-C0
  OP2 VALUE-C0
    COMMENT-
    ADDRESS-063
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-064
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-065
      LABEL-zero
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-065
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-066
      LABEL-
  FORMATTED-JUMP NC, END
  LOGFORMAT-JUMP NC, END[06A]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-END
  OP2 VALUE-06A
    COMMENT-
    ADDRESS-067
      LABEL-
  FORMATTED-LOAD s1, 80
  LOGFORMAT-LOAD s1, 80
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-
    ADDRESS-068
      LABEL-
  FORMATTED-OUTPUT s1, LED_port
  LOGFORMAT-OUTPUT s1, LED_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-LED_port
  OP2 VALUE-80
    COMMENT-
    ADDRESS-069
      LABEL-
  FORMATTED-JUMP END
  LOGFORMAT-JUMP END[06A]
INSTRUCTION-JUMP
   OPERAND1-END
  OP1 VALUE-06A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06A
      LABEL-END
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06A
      LABEL-
  FORMATTED-LOAD s1, 00
  LOGFORMAT-LOAD s1, 00
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; reset
    ADDRESS-06B
      LABEL-
  FORMATTED-LOAD s2, 00
  LOGFORMAT-LOAD s2, 00
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-06C
      LABEL-
  FORMATTED-LOAD s3, 00
  LOGFORMAT-LOAD s3, 00
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-06D
      LABEL-
  FORMATTED-STORE s1, save_s1
  LOGFORMAT-STORE s1, save_s1[06]
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-save_s1
  OP2 VALUE-06
    COMMENT-; save to memory
    ADDRESS-06E
      LABEL-
  FORMATTED-STORE s2, save_s2
  LOGFORMAT-STORE s2, save_s2[07]
INSTRUCTION-STORE
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-save_s2
  OP2 VALUE-07
    COMMENT-
    ADDRESS-06F
      LABEL-
  FORMATTED-STORE s3, save_s3
  LOGFORMAT-STORE s3, save_s3[08]
INSTRUCTION-STORE
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-save_s3
  OP2 VALUE-08
    COMMENT-
    ADDRESS-070
      LABEL-
  FORMATTED-FETCH s0, ISR_preserve_s0
  LOGFORMAT-FETCH s0, ISR_preserve_s0[00]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-ISR_preserve_s0
  OP2 VALUE-00
    COMMENT-;let's return them to the stack
    ADDRESS-071
      LABEL-
  FORMATTED-FETCH s1, ISR_preserve_s1
  LOGFORMAT-FETCH s1, ISR_preserve_s1[01]
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-ISR_preserve_s1
  OP2 VALUE-01
    COMMENT-
    ADDRESS-072
      LABEL-
  FORMATTED-FETCH s2, ISR_preserve_s2
  LOGFORMAT-FETCH s2, ISR_preserve_s2[02]
INSTRUCTION-FETCH
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-ISR_preserve_s2
  OP2 VALUE-02
    COMMENT-
    ADDRESS-073
      LABEL-
  FORMATTED-FETCH s3, ISR_preserve_s3
  LOGFORMAT-FETCH s3, ISR_preserve_s3[03]
INSTRUCTION-FETCH
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-ISR_preserve_s3
  OP2 VALUE-03
    COMMENT-
    ADDRESS-074
      LABEL-
  FORMATTED-FETCH s4, ISR_preserve_s4
  LOGFORMAT-FETCH s4, ISR_preserve_s4[04]
INSTRUCTION-FETCH
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-ISR_preserve_s4
  OP2 VALUE-04
    COMMENT-
    ADDRESS-075
      LABEL-
  FORMATTED-FETCH s5, ISR_preserve_s5
  LOGFORMAT-FETCH s5, ISR_preserve_s5[05]
INSTRUCTION-FETCH
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-ISR_preserve_s5
  OP2 VALUE-05
    COMMENT-
    ADDRESS-076
      LABEL-
  FORMATTED-RETURNI ENABLE
  LOGFORMAT-RETURNI ENABLE
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
  OP1 VALUE-ENABLE
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Interrupt Vector
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-ADDRESS 3FF
  LOGFORMAT-ADDRESS 3FF
INSTRUCTION-ADDRESS
   OPERAND1-3FF
  OP1 VALUE-3FF
   OPERAND2-
  OP2 VALUE-
    COMMENT-;for interrupt
    ADDRESS-3FF
      LABEL-
  FORMATTED-JUMP ISR
  LOGFORMAT-JUMP ISR[023]
INSTRUCTION-JUMP
   OPERAND1-ISR
  OP1 VALUE-023
   OPERAND2-
  OP2 VALUE-
    COMMENT-;for interrupt
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
