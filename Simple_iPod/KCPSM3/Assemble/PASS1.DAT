      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Port definitions
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED_port
   OPERAND2-80
    COMMENT-;8 simple LEDs. Is an OUTPUT port. for LED[9:2]
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DATA_IN_PORT
   OPERAND2-00
    COMMENT-;input data port. this is an INPUT port.
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED_0
   OPERAND2-40
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s0
   OPERAND2-00
    COMMENT-;Preserve s0 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s1
   OPERAND2-01
    COMMENT-;Preserve s1 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s2
   OPERAND2-02
    COMMENT-;Preserve s2 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s3
   OPERAND2-03
    COMMENT-;Preserve s3 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s4
   OPERAND2-04
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s5
   OPERAND2-05
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-save_s2
   OPERAND2-07
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-save_s3
   OPERAND2-08
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-save_s1
   OPERAND2-06
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED_pattern
   OPERAND2-04
    COMMENT-;remember state of LEDs (8-bit counter in this case)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Useful data constants
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Constant to define a software delay of 1us. This must be adjusted to reflect the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; calculation highly predictable. The '6' in the following equation even allows for
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 'CALL delay_1us' instruction in the initiating code.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; For clock rates below 10MHz the value of 1 must be used and the operation will
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; become lower than intended. Interrupts may effect the timing of software based
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delays.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-delay_1us_constant
   OPERAND2-05
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Initialise the system
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-cold_start
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-LED_pattern
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;now interrupts are on
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;*******************PART1*******************;
      LABEL-main_program
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-01
    COMMENT-;mov s1,#1
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s6
   OPERAND2-LED_0
    COMMENT-;now the LED0 is on
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1s
   OPERAND2-
    COMMENT-;wait 1 second
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-00
    COMMENT-;mov s1,#0
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s6
   OPERAND2-LED_0
    COMMENT-;now the LED0 is off
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1s
   OPERAND2-
    COMMENT-;wait 1 second
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-main_program
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Software delay routines
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 1us.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; instruction executes in 2 clock cycles making the calculation highly predictable.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; in the initiating code. Interrupts may effect software derived delays.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0
      LABEL-delay_1us
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-delay_1us_constant
    COMMENT-
      LABEL-wait_1us
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1us
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 40us.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_40us
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-28
    COMMENT-;40 x 1us = 40us
      LABEL-wait_40us
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_40us
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 1ms.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1, s2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1ms
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-19
    COMMENT-;25 x 40us = 1ms
      LABEL-wait_1ms
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s2
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1ms
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 20ms.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 20ms used during initialisation.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1, s2, s3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_20ms
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-14
    COMMENT-;20 x 1ms = 20ms
      LABEL-wait_20ms
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s3
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_20ms
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of approximately 1 second.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1, s2, s3, s4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1s
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-32
    COMMENT-;50 x 20ms = 1000ms
      LABEL-wait_1s
INSTRUCTION-CALL
   OPERAND1-delay_20ms
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s4
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1s
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-;from pracPICO.psm
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;*******************PART2***************************;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;some important comments:
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;we need to read the data and then  s1 counter s2 sum
      LABEL-ISR
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-ISR_preserve_s0
    COMMENT-;data
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-ISR_preserve_s1
    COMMENT-;let's use it as a counter
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s2
   OPERAND2-ISR_preserve_s2
    COMMENT-;let's use it as sum1
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s3
   OPERAND2-ISR_preserve_s3
    COMMENT-;let's use it as save_s3
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s4
   OPERAND2-ISR_preserve_s4
    COMMENT-;let's use it as unimportant sum
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s5
   OPERAND2-ISR_preserve_s5
    COMMENT-;this is the output of led
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-save_s1
    COMMENT-; reload the values of this
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-save_s2
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s3
   OPERAND2-save_s3
    COMMENT-
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-DATA_IN_PORT
    COMMENT-; s0 gets the data
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-80
    COMMENT-; see if the msb is 1 which means negative
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-negative_to_positive
    COMMENT-
      LABEL-continue1
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;now  256 times wait
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;  now add this save_s1
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-increment_LED
    COMMENT-
      LABEL-counter_loop
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-;will finish it after it reaches to FF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-got_256
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-save_s1
    COMMENT-;save them to memory
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s2
   OPERAND2-save_s2
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s3
   OPERAND2-save_s3
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-ISR_preserve_s0
    COMMENT-;let's return them to the stack
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-ISR_preserve_s1
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-ISR_preserve_s2
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s3
   OPERAND2-ISR_preserve_s3
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s4
   OPERAND2-ISR_preserve_s4
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s5
   OPERAND2-ISR_preserve_s5
    COMMENT-
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-
      LABEL-increment_LED
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s2
   OPERAND2-01
    COMMENT-;save_s3 is incrementing by 1
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-counter_loop
   OPERAND2-
    COMMENT-
      LABEL-negative_to_positive
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-FF
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-01
    COMMENT-;now we convert negative to positive
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-continue1
   OPERAND2-
    COMMENT-
      LABEL-got_256
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;here we will compare the value of save_s3 then output it to LEDs
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;let's say we got 5 = 00000101 then we need to get xxx00000
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-six
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-FF
    COMMENT-;LED2
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-six
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-five
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-FE
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-five
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-four
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-FC
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-four
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-three
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-F8
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-three
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-two
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-F0
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-two
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-one
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-E0
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-one
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-zero
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-C0
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-zero
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-real_zero
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-80
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-real_zero
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-END
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_port
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-END
   OPERAND2-
    COMMENT-
      LABEL-END
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-; reset
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-save_s1
    COMMENT-; save to memory
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s2
   OPERAND2-save_s2
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s3
   OPERAND2-save_s3
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-ISR_preserve_s0
    COMMENT-;let's return them to the stack
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-ISR_preserve_s1
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-ISR_preserve_s2
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s3
   OPERAND2-ISR_preserve_s3
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s4
   OPERAND2-ISR_preserve_s4
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s5
   OPERAND2-ISR_preserve_s5
    COMMENT-
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Interrupt Vector
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3FF
   OPERAND2-
    COMMENT-;for interrupt
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-ISR
   OPERAND2-
    COMMENT-;for interrupt
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
