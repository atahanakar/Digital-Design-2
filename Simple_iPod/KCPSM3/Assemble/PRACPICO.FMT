                      ;**************************************************************************************
                      ; Port definitions
                      ;**************************************************************************************
                      ;
                      ;
                      ;
                      CONSTANT LED_port, 80           ;8 simple LEDs. Is an OUTPUT port. for LED[9:2]
                      CONSTANT DATA_IN_PORT, 00       ;input data port. this is an INPUT port.
                      CONSTANT LED_0, 40
                      CONSTANT ISR_preserve_s0, 00    ;Preserve s0 contents during ISR
                      CONSTANT ISR_preserve_s1, 01    ;Preserve s1 contents during ISR
                      CONSTANT ISR_preserve_s2, 02    ;Preserve s2 contents during ISR
                      CONSTANT ISR_preserve_s3, 03    ;Preserve s3 contents during ISR
                      CONSTANT ISR_preserve_s4, 04
                      CONSTANT ISR_preserve_s5, 05
                      CONSTANT save_s2, 07
                      CONSTANT save_s3, 08
                      CONSTANT save_s1, 06
                      ;
                      CONSTANT LED_pattern, 04        ;remember state of LEDs (8-bit counter in this case)
                      ;
                      ;**************************************************************************************
                      ; Useful data constants
                      ;**************************************************************************************
                      ;
                      ;
                      ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                      ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                      ; calculation highly predictable. The '6' in the following equation even allows for
                      ; 'CALL delay_1us' instruction in the initiating code.
                      ;
                      ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                      ;
                      ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                      ; For clock rates below 10MHz the value of 1 must be used and the operation will
                      ; become lower than intended. Interrupts may effect the timing of software based
                      ; delays.
                      ;
                      CONSTANT delay_1us_constant, 05
                      ;
                      ;
                      ;
                      ;**************************************************************************************
                      ; Initialise the system
                      ;**************************************************************************************
                      ;
          cold_start: LOAD s0, 00
                      STORE s0, LED_pattern
                      OUTPUT s0, LED_port
                      ENABLE INTERRUPT                ;now interrupts are on
                      ;*******************PART1*******************;
        main_program: 
                      LOAD s6, 01                     ;mov s1,#1
                      OUTPUT s6, LED_0                ;now the LED0 is on
                      CALL delay_1s                   ;wait 1 second
                      LOAD s6, 00                     ;mov s1,#0
                      OUTPUT s6, LED_0                ;now the LED0 is off
                      CALL delay_1s                   ;wait 1 second
                      JUMP main_program
                      ;**************************************************************************************
                      ; Software delay routines
                      ;**************************************************************************************
                      ;
                      ; Delay of 1us.
                      ;
                      ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                      ; instruction executes in 2 clock cycles making the calculation highly predictable.
                      ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                      ; in the initiating code. Interrupts may effect software derived delays.
                      ;
                      ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                      ;
                      ; Registers used s0
           delay_1us: LOAD s0, delay_1us_constant
            wait_1us: SUB s0, 01
                      JUMP NZ, wait_1us
                      RETURN
                      ;
                      ; Delay of 40us.
                      ;
                      ; Registers used s0, s1
                      ;
          delay_40us: LOAD s1, 28                     ;40 x 1us = 40us
           wait_40us: CALL delay_1us
                      SUB s1, 01
                      JUMP NZ, wait_40us
                      RETURN
                      ;
                      ;
                      ; Delay of 1ms.
                      ;
                      ; Registers used s0, s1, s2
                      ;
           delay_1ms: LOAD s2, 19                     ;25 x 40us = 1ms
            wait_1ms: CALL delay_40us
                      SUB s2, 01
                      JUMP NZ, wait_1ms
                      RETURN
                      ;
                      ; Delay of 20ms.
                      ;
                      ; Delay of 20ms used during initialisation.
                      ;
                      ; Registers used s0, s1, s2, s3
                      ;
          delay_20ms: LOAD s3, 14                     ;20 x 1ms = 20ms
           wait_20ms: CALL delay_1ms
                      SUB s3, 01
                      JUMP NZ, wait_20ms
                      RETURN
                      ;
                      ; Delay of approximately 1 second.
                      ;
                      ; Registers used s0, s1, s2, s3, s4
                      ;
            delay_1s: LOAD s4, 32                     ;50 x 20ms = 1000ms
             wait_1s: CALL delay_20ms
                      SUB s4, 01
                      JUMP NZ, wait_1s
                      RETURN                          ;from pracPICO.psm
                      ;*******************PART2***************************;
                      ;some important comments:
                      ;we need to read the data and then  s1 counter s2 sum
                 ISR: 
                      STORE s0, ISR_preserve_s0       ;data
                      STORE s1, ISR_preserve_s1       ;let's use it as a counter
                      STORE s2, ISR_preserve_s2       ;let's use it as sum1
                      STORE s3, ISR_preserve_s3       ;let's use it as save_s3
                      STORE s4, ISR_preserve_s4       ;let's use it as unimportant sum
                      STORE s5, ISR_preserve_s5       ;this is the output of led
                      FETCH s1, save_s1               ; reload the values of this
                      FETCH s2, save_s2
                      FETCH s3, save_s3
                      INPUT s0, DATA_IN_PORT          ; s0 gets the data
                      COMPARE s0, 80                  ; see if the msb is 1 which means negative
                      JUMP NC, negative_to_positive
           continue1: 
                      ;now  256 times wait
                      ADD s1, s0                      ;  now add this save_s1
                      JUMP C, increment_LED
        counter_loop: 
                      ADD s3, 01                      ;will finish it after it reaches to FF
                      JUMP C, got_256
                      STORE s1, save_s1               ;save them to memory
                      STORE s2, save_s2
                      STORE s3, save_s3
                      FETCH s0, ISR_preserve_s0       ;let's return them to the stack
                      FETCH s1, ISR_preserve_s1
                      FETCH s2, ISR_preserve_s2
                      FETCH s3, ISR_preserve_s3
                      FETCH s4, ISR_preserve_s4
                      FETCH s5, ISR_preserve_s5
                      RETURNI ENABLE
       increment_LED: 
                      ADD s2, 01                      ;save_s3 is incrementing by 1
                      JUMP counter_loop
negative_to_positive: 
                      XOR s0, FF
                      ADD s0, 01                      ;now we convert negative to positive
                      JUMP continue1
             got_256: ;here we will compare the value of save_s3 then output it to LEDs
                      ;let's say we got 5 = 00000101 then we need to get xxx00000
                      SL0 s2
                      JUMP NC, six
                      LOAD s1, FF                     ;LED2
                      OUTPUT s1, LED_port
                      JUMP END
                 six: 
                      SL0 s2
                      JUMP NC, five
                      LOAD s1, FE
                      OUTPUT s1, LED_port
                      JUMP END
                five: 
                      SL0 s2
                      JUMP NC, four
                      LOAD s1, FC
                      OUTPUT s1, LED_port
                      JUMP END
                four: 
                      SL0 s2
                      JUMP NC, three
                      LOAD s1, F8
                      OUTPUT s1, LED_port
                      JUMP END
               three: 
                      SL0 s2
                      JUMP NC, two
                      LOAD s1, F0
                      OUTPUT s1, LED_port
                      JUMP END
                 two: 
                      SL0 s2
                      JUMP NC, one
                      LOAD s1, E0
                      OUTPUT s1, LED_port
                      JUMP END
                 one: 
                      SL0 s2
                      JUMP NC, zero
                      LOAD s1, C0
                      OUTPUT s1, LED_port
                      JUMP END
                zero: 
                      SL0 s2
                      JUMP NC, END
                      LOAD s1, 80
                      OUTPUT s1, LED_port
                      JUMP END
                 END: 
                      LOAD s1, 00                     ; reset
                      LOAD s2, 00
                      LOAD s3, 00
                      STORE s1, save_s1               ; save to memory
                      STORE s2, save_s2
                      STORE s3, save_s3
                      FETCH s0, ISR_preserve_s0       ;let's return them to the stack
                      FETCH s1, ISR_preserve_s1
                      FETCH s2, ISR_preserve_s2
                      FETCH s3, ISR_preserve_s3
                      FETCH s4, ISR_preserve_s4
                      FETCH s5, ISR_preserve_s5
                      RETURNI ENABLE
                      ;**************************************************************************************
                      ; Interrupt Vector
                      ;**************************************************************************************
                      ;
                      ADDRESS 3FF                     ;for interrupt
                      JUMP ISR                        ;for interrupt
                      ;
                      ;
